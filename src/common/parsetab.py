# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "leftPLUSMINUSleftTIMESDIVIDErightUMINUSDIVIDE LPAREN MINUS NUMBER PLUS RPAREN TIMESexpression : NUMBERexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : MINUS expression %prec UMINUS"

_lr_action_items = {
    "NUMBER": (
        [
            0,
            3,
            4,
            5,
            6,
            7,
            8,
        ],
        [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
        ],
    ),
    "LPAREN": (
        [
            0,
            3,
            4,
            5,
            6,
            7,
            8,
        ],
        [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
        ],
    ),
    "MINUS": (
        [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
        ],
        [
            3,
            6,
            -1,
            3,
            3,
            3,
            3,
            3,
            3,
            -7,
            6,
            -2,
            -3,
            -4,
            -5,
            -6,
        ],
    ),
    "$end": (
        [
            1,
            2,
            9,
            11,
            12,
            13,
            14,
            15,
        ],
        [
            0,
            -1,
            -7,
            -2,
            -3,
            -4,
            -5,
            -6,
        ],
    ),
    "PLUS": (
        [
            1,
            2,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
        ],
        [
            5,
            -1,
            -7,
            5,
            -2,
            -3,
            -4,
            -5,
            -6,
        ],
    ),
    "TIMES": (
        [
            1,
            2,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
        ],
        [
            7,
            -1,
            -7,
            7,
            7,
            7,
            -4,
            -5,
            -6,
        ],
    ),
    "DIVIDE": (
        [
            1,
            2,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
        ],
        [
            8,
            -1,
            -7,
            8,
            8,
            8,
            -4,
            -5,
            -6,
        ],
    ),
    "RPAREN": (
        [
            2,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
        ],
        [
            -1,
            -7,
            15,
            -2,
            -3,
            -4,
            -5,
            -6,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "expression": (
        [
            0,
            3,
            4,
            5,
            6,
            7,
            8,
        ],
        [
            1,
            9,
            10,
            11,
            12,
            13,
            14,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> expression", "S'", 1, None, None, None),
    ("expression -> NUMBER", "expression", 1, "p_expression_number", "parser.py", 13),
    (
        "expression -> expression PLUS expression",
        "expression",
        3,
        "p_expression_binop",
        "parser.py",
        17,
    ),
    (
        "expression -> expression MINUS expression",
        "expression",
        3,
        "p_expression_binop",
        "parser.py",
        18,
    ),
    (
        "expression -> expression TIMES expression",
        "expression",
        3,
        "p_expression_binop",
        "parser.py",
        19,
    ),
    (
        "expression -> expression DIVIDE expression",
        "expression",
        3,
        "p_expression_binop",
        "parser.py",
        20,
    ),
    (
        "expression -> LPAREN expression RPAREN",
        "expression",
        3,
        "p_expression_group",
        "parser.py",
        27,
    ),
    (
        "expression -> MINUS expression",
        "expression",
        2,
        "p_expression_uminus",
        "parser.py",
        31,
    ),
]
