
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSDIVIDE EQUALS FLOAT ID INTEGER LPAREN MINUS PLUS RPAREN TIMESstatement : expressionstatement : ID EQUALS expressionexpression : INTEGERexpression : FLOATexpression : IDexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : MINUS expression %prec UMINUSexpression : ID LPAREN expression RPAREN'
    
_lr_action_items = {'ID':([0,6,7,8,9,10,11,12,13,],[3,15,15,15,15,15,15,15,15,]),'INTEGER':([0,6,7,8,9,10,11,12,13,],[4,4,4,4,4,4,4,4,4,]),'FLOAT':([0,6,7,8,9,10,11,12,13,],[5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,3,6,7,8,9,10,11,12,13,15,],[7,13,7,7,7,7,7,7,7,7,13,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[6,9,-5,-3,-4,6,6,6,6,6,6,6,6,-11,-5,9,-6,-7,-8,-9,9,9,-10,-12,]),'$end':([1,2,3,4,5,14,15,17,18,19,20,21,23,24,],[0,-1,-5,-3,-4,-11,-5,-6,-7,-8,-9,-2,-10,-12,]),'PLUS':([2,3,4,5,14,15,16,17,18,19,20,21,22,23,24,],[8,-5,-3,-4,-11,-5,8,-6,-7,-8,-9,8,8,-10,-12,]),'TIMES':([2,3,4,5,14,15,16,17,18,19,20,21,22,23,24,],[10,-5,-3,-4,-11,-5,10,10,10,-8,-9,10,10,-10,-12,]),'DIVIDE':([2,3,4,5,14,15,16,17,18,19,20,21,22,23,24,],[11,-5,-3,-4,-11,-5,11,11,11,-8,-9,11,11,-10,-12,]),'EQUALS':([3,],[12,]),'RPAREN':([4,5,14,15,16,17,18,19,20,22,23,24,],[-3,-4,-11,-5,23,-6,-7,-8,-9,24,-10,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,6,7,8,9,10,11,12,13,],[2,14,16,17,18,19,20,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',18),
  ('statement -> ID EQUALS expression','statement',3,'p_statement_assign','parser.py',22),
  ('expression -> INTEGER','expression',1,'p_expression_integer','parser.py',27),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',31),
  ('expression -> ID','expression',1,'p_expression_var','parser.py',35),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',43),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',44),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',45),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',46),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',57),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',61),
  ('expression -> ID LPAREN expression RPAREN','expression',4,'p_expression_func','parser.py',65),
]
